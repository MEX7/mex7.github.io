<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MEX7</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mex7.github.io/"/>
  <updated>2021-04-12T02:34:11.523Z</updated>
  <id>http://mex7.github.io/</id>
  
  <author>
    <name>mex7</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CGO</title>
    <link href="http://mex7.github.io/2021/04/12/CGO/"/>
    <id>http://mex7.github.io/2021/04/12/CGO/</id>
    <published>2021-04-12T03:34:40.000Z</published>
    <updated>2021-04-12T02:34:11.523Z</updated>
    
    <content type="html"><![CDATA[<p>回调模式demo</p><p><a href="https://github.com/mex7/cgo" target="_blank" rel="noopener">https://github.com/mex7/cgo</a></p><p>流程详解</p><p><img src="https://files.catbox.moe/uzb0c1.png" alt="https://files.catbox.moe/uzb0c1.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;回调模式demo&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mex7/cgo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mex7/cgo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;流程详解&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>K8s Web Shell</title>
    <link href="http://mex7.github.io/2021/04/11/K8sWebShell/"/>
    <id>http://mex7.github.io/2021/04/11/K8sWebShell/</id>
    <published>2021-04-11T05:18:54.000Z</published>
    <updated>2021-04-12T02:25:24.199Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DouYu</title>
    <link href="http://mex7.github.io/2021/04/06/Life/"/>
    <id>http://mex7.github.io/2021/04/06/Life/</id>
    <published>2021-04-05T16:09:36.000Z</published>
    <updated>2021-04-12T02:35:30.068Z</updated>
    
    <content type="html"><![CDATA[<p>2017年3月进入斗鱼，开始学习go语言，并进行</p><ul><li>斗鱼文档系统</li><li>监控系统</li><li>微服务管理系统开发</li><li>链路中心</li><li>推流QoS监控</li><li>直播列表排序</li><li></li></ul><p>2018年</p><ul><li>识别服务调度平台</li><li>微服务用户中心</li><li>微服务监控中心</li><li>自建CDN调度系统</li><li>斗鱼 开发平台</li></ul><p>2019年</p><ul><li>识别架构设计</li><li>识别架构优化</li><li></li></ul><p>2020年</p><ul><li>斗鱼应用容器化推动</li><li>斗鱼微服务管理平台</li><li>算法自动化套件研发</li><li>华为SaaS平台接入</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年3月进入斗鱼，开始学习go语言，并进行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;斗鱼文档系统&lt;/li&gt;
&lt;li&gt;监控系统&lt;/li&gt;
&lt;li&gt;微服务管理系统开发&lt;/li&gt;
&lt;li&gt;链路中心&lt;/li&gt;
&lt;li&gt;推流QoS监控&lt;/li&gt;
&lt;li&gt;直播列表排序&lt;/li&gt;
&lt;li&gt;&lt;/l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你一定会成为你想要成为的人</title>
    <link href="http://mex7.github.io/2021/03/29/%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%88%90%E4%B8%BA%E4%BD%A0%E6%83%B3%E8%A6%81%E6%88%90%E4%B8%BA%E7%9A%84%E4%BA%BA/"/>
    <id>http://mex7.github.io/2021/03/29/%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%88%90%E4%B8%BA%E4%BD%A0%E6%83%B3%E8%A6%81%E6%88%90%E4%B8%BA%E7%9A%84%E4%BA%BA/</id>
    <published>2021-03-29T07:09:25.000Z</published>
    <updated>2021-03-29T07:15:00.205Z</updated>
    
    <content type="html"><![CDATA[<p>生命是没意义的 因为你我终将死去<br>时间的长河会抹去 你我存在的痕迹<br>可自从人类 学会相爱的那一刻起<br>我们因为对方的存在 而获得了意义<br>理解或不理解都罢了，相信你所相信的<br>我们的确无法去改变 你我的生老病死<br>但至少你有权力去选择人生<br>你一定能够成为你想要去成为的人  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生命是没意义的 因为你我终将死去&lt;br&gt;时间的长河会抹去 你我存在的痕迹&lt;br&gt;可自从人类 学会相爱的那一刻起&lt;br&gt;我们因为对方的存在 而获得了意义&lt;br&gt;理解或不理解都罢了，相信你所相信的&lt;br&gt;我们的确无法去改变 你我的生老病死&lt;br&gt;但至少你有权力去选择人生&lt;br&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go</title>
    <link href="http://mex7.github.io/2021/03/26/Go/"/>
    <id>http://mex7.github.io/2021/03/26/Go/</id>
    <published>2021-03-26T13:53:15.000Z</published>
    <updated>2021-04-02T11:15:27.313Z</updated>
    
    <content type="html"><![CDATA[<p>数组是值类型</p><p>常量是无类型</p><p>Go 语言指针不支持运算</p><p>Golang 没有类概念</p><p>GoMock 不能对函数打桩</p><p>panic导致异常，延迟函数会执行</p><p>GO预研中字符串是不可变的，所以不能对字符串中某个字符单独复制</p><p>import后面跟的是包路径</p><p>go vendor会优先从vendor目录寻找依赖包</p><p>cap 返回数组的元素个数：slice channel array</p><p>go tool vet 才可以递归</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组是值类型&lt;/p&gt;
&lt;p&gt;常量是无类型&lt;/p&gt;
&lt;p&gt;Go 语言指针不支持运算&lt;/p&gt;
&lt;p&gt;Golang 没有类概念&lt;/p&gt;
&lt;p&gt;GoMock 不能对函数打桩&lt;/p&gt;
&lt;p&gt;panic导致异常，延迟函数会执行&lt;/p&gt;
&lt;p&gt;GO预研中字符串是不可变的，所以不能对字符串
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IOModel</title>
    <link href="http://mex7.github.io/2021/03/25/IOModel/"/>
    <id>http://mex7.github.io/2021/03/25/IOModel/</id>
    <published>2021-03-25T03:46:00.000Z</published>
    <updated>2021-03-26T13:34:27.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO-Model"><a href="#IO-Model" class="headerlink" title="IO Model"></a>IO Model</h2><h3 id="同步阻塞-IO"><a href="#同步阻塞-IO" class="headerlink" title="同步阻塞 IO"></a>同步阻塞 IO</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">  socket = accept();</span><br><span class="line">  handle(socket);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步非阻塞-IO，线程轮询"><a href="#同步非阻塞-IO，线程轮询" class="headerlink" title="同步非阻塞 IO，线程轮询"></a>同步非阻塞 IO，线程轮询</h3><p>瞬时高并发会打垮系统。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">  socket = accept();</span><br><span class="line">  <span class="built_in">new</span> thread(socket);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IO-多路复用-异步阻塞-IO：Reactor-设计模式，Linux-中的-epoll"><a href="#IO-多路复用-异步阻塞-IO：Reactor-设计模式，Linux-中的-epoll" class="headerlink" title="IO 多路复用/异步阻塞 IO：Reactor 设计模式，Linux 中的 epoll"></a>IO 多路复用/异步阻塞 IO：Reactor 设计模式，Linux 中的 epoll</h3><p>Reactor 设计模式</p><h3 id="异步-IO-异步非阻塞-IO：Proactor-设计模式"><a href="#异步-IO-异步非阻塞-IO：Proactor-设计模式" class="headerlink" title="异步 IO/异步非阻塞 IO：Proactor 设计模式"></a>异步 IO/异步非阻塞 IO：Proactor 设计模式</h3><p>Proactor 设计模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IO-Model&quot;&gt;&lt;a href=&quot;#IO-Model&quot; class=&quot;headerlink&quot; title=&quot;IO Model&quot;&gt;&lt;/a&gt;IO Model&lt;/h2&gt;&lt;h3 id=&quot;同步阻塞-IO&quot;&gt;&lt;a href=&quot;#同步阻塞-IO&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CollaborativeFiltering</title>
    <link href="http://mex7.github.io/2021/03/25/CollaborativeFiltering/"/>
    <id>http://mex7.github.io/2021/03/25/CollaborativeFiltering/</id>
    <published>2021-03-25T02:36:45.000Z</published>
    <updated>2021-03-25T03:27:57.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>推荐算法</p><ol><li>基于内容推荐：依赖自然语言NLP知识，挖掘文本TF-IDF特征向量，可以找到用户独特的小众喜好，较好的解释性。</li><li>协调过滤推荐：基于机器学习算法</li></ol><h2 id="协同过滤推荐"><a href="#协同过滤推荐" class="headerlink" title="协同过滤推荐"></a>协同过滤推荐</h2><p>包括在线协同和离线过滤两个部分。</p><ul><li>在线协同：通过在线数据找到用户可能喜欢的物品</li><li>离线过滤：过滤掉不值得推荐的部分，例如评分低或用户已购买</li></ul><ol><li>基于用户 user-based：用户之间的相似度，相似用户推荐相似内容；计算复杂度高于 item-based ；大型项目优先考虑这个。</li><li>基于项目 item-based：内容之间的相似度，根据内容预测用户；缺乏推荐多样性</li><li>基于模型 model based：用部分用户和部分内容间的关系，根据模型来预测全部数据间的关系</li></ol><p>缺陷：</p><ul><li>冷启动问题</li><li>没有考虑情境间的差异</li><li>无法得到小众喜好</li></ul><h3 id="建模算法"><a href="#建模算法" class="headerlink" title="建模算法"></a>建模算法</h3><h4 id="关联算法"><a href="#关联算法" class="headerlink" title="关联算法"></a>关联算法</h4><p>分析用户购买物品，做频繁集挖掘，找到其他用户未购买过的相物品，如果用户购买了其中的物品，则进行其他相关规则推荐（支持度、置信度、提升度）。</p><ul><li>Apriori 算法</li><li>FP Tree 算法</li><li>PrefixSpan 算法</li></ul><h4 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h4><p>将用户和物品进行一定规则的聚类</p><ul><li>K-Means 聚类算法</li><li>BIRCH 聚类算法</li><li>DBSCAN 密度聚类算法</li><li>谱聚类（spectral clustering）</li></ul><h4 id="分类算法"><a href="#分类算法" class="headerlink" title="分类算法"></a>分类算法</h4><p>根据用户评分进行分段后推荐</p><ul><li>逻辑回归：解释性强，有明确的概率，可以根据数据特征做工程化，调优目的明确。</li><li>朴素贝叶斯</li></ul><h4 id="回归算法"><a href="#回归算法" class="headerlink" title="回归算法"></a>回归算法</h4><p>通过回归模型对用户打分预测，得到评分连续值，而非离散值</p><ul><li>Ridge 回归</li><li>回归树</li><li>支持向量回归</li></ul><h4 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h4><p>用户物品评分是稀疏矩阵</p><ul><li>FunkSVD</li><li>BiasSVD</li><li>SVD++</li></ul><h4 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h4><p>两层神经网络进行推荐算法，限制波尔兹曼机（RBM）。</p><h4 id="图模型"><a href="#图模型" class="headerlink" title="图模型"></a>图模型</h4><p>用户相似度放到一个图模型里</p><ul><li>SimRank 被相似对象引用的两个对象也具有相似性</li><li>马尔科夫模型 基于马尔科夫链，基于传导性找出普通距离度量算法难以找出的相似性</li></ul><h4 id="隐语义模型"><a href="#隐语义模型" class="headerlink" title="隐语义模型"></a>隐语义模型</h4><p>基于 NLP 对用户行为进行分析</p><ul><li>LSA</li><li>隐含狄利克雷分布 LDA</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;推荐算法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于内容推荐：依赖自然语言NLP知识，挖掘文本TF-IDF特征向量，可以找到用户独特的小众喜好，较好的解
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>GoMock</title>
    <link href="http://mex7.github.io/2021/03/23/GoMock/"/>
    <id>http://mex7.github.io/2021/03/23/GoMock/</id>
    <published>2021-03-23T07:29:41.000Z</published>
    <updated>2021-03-23T07:30:00.087Z</updated>
    
    <content type="html"><![CDATA[<p>go install github.com/golang/mock/mockgen@v1.5.0</p><p>go doc github.com/golang/mock/gomock</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;go install github.com/golang/mock/mockgen@v1.5.0&lt;/p&gt;
&lt;p&gt;go doc github.com/golang/mock/gomock&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SecurityVulnerabilitiesDefensiveMeasures</title>
    <link href="http://mex7.github.io/2021/03/23/SecurityVulnerabilitiesDefensiveMeasures/"/>
    <id>http://mex7.github.io/2021/03/23/SecurityVulnerabilitiesDefensiveMeasures/</id>
    <published>2021-03-23T03:06:26.000Z</published>
    <updated>2021-03-23T06:40:29.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><ul><li>sql 转换，特殊字符转义，危险字符、关键词过滤</li><li>输入字段类型限制、长度限制</li><li>统一采用 utf8mb4 编码</li><li>限制客户端对数据库的操作权限</li></ul><h2 id="XSS（Cross-Site-Scripting）跨站脚本攻击"><a href="#XSS（Cross-Site-Scripting）跨站脚本攻击" class="headerlink" title="XSS（Cross Site Scripting）跨站脚本攻击"></a>XSS（Cross Site Scripting）跨站脚本攻击</h2><p>本质是 html 注入</p><ul><li>字符过滤</li><li>服务端进行数据内容校验</li><li>白名单屏蔽恶意链接</li><li>后端对页面输出进行编码转换</li></ul><h2 id="CSRF（Server-Side-Request-Forgery）跨站请求伪造攻击"><a href="#CSRF（Server-Side-Request-Forgery）跨站请求伪造攻击" class="headerlink" title="CSRF（Server-Side Request Forgery）跨站请求伪造攻击"></a>CSRF（Server-Side Request Forgery）跨站请求伪造攻击</h2><p>请求伪造</p><ul><li>服务端进行 Referer 验证</li><li>具备过期时间的 token</li><li>header 加入自定义属性校验，短时间或者单词请求有效</li></ul><h2 id="任意文件上传、下载"><a href="#任意文件上传、下载" class="headerlink" title="任意文件上传、下载"></a>任意文件上传、下载</h2><ul><li>上传下载身份验证，用户只操作自有权限文件或文件类型</li><li>验证文件类型、大小，后端进行文件类型校验、目录执行权限限制</li><li>禁止回传绝对路径，禁止用户上传数据进行目录指定和文件名称定义</li><li>限制目录权限，提供独立的读取接口</li></ul><h2 id="越权访问"><a href="#越权访问" class="headerlink" title="越权访问"></a>越权访问</h2><ul><li>数据从当前登录态获取</li></ul><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><ul><li>api 接口签名</li></ul><h2 id="明文传输"><a href="#明文传输" class="headerlink" title="明文传输"></a>明文传输</h2><ul><li>公网走 https</li><li>敏感数据单独加密</li><li>核心数据存储加密</li></ul><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><ul><li>接口返回数据</li><li>注释</li><li>程序后门</li><li>报错提示</li></ul><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><ul><li>用户登录次数限制</li><li>IP访问限制</li><li>服务端校验</li><li>API鉴权</li></ul><h2 id="XXE（XML-External-Entity-Injection）XML-外部实体注入攻击"><a href="#XXE（XML-External-Entity-Injection）XML-外部实体注入攻击" class="headerlink" title="XXE（XML External Entity Injection）XML 外部实体注入攻击"></a>XXE（XML External Entity Injection）XML 外部实体注入攻击</h2><ul><li>对用户提交的 XML 数据进行关键词过滤</li></ul><h2 id="短信、邮件轰炸"><a href="#短信、邮件轰炸" class="headerlink" title="短信、邮件轰炸"></a>短信、邮件轰炸</h2><ul><li>限制使用频率</li><li>异步发送，单次发布记录持久化后进行重复校验</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SQL注入攻击&quot;&gt;&lt;a href=&quot;#SQL注入攻击&quot; class=&quot;headerlink&quot; title=&quot;SQL注入攻击&quot;&gt;&lt;/a&gt;SQL注入攻击&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;sql 转换，特殊字符转义，危险字符、关键词过滤&lt;/li&gt;
&lt;li&gt;输入字段类型限制、长
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Golang Design Patterns</title>
    <link href="http://mex7.github.io/2021/03/19/DesignPattern/"/>
    <id>http://mex7.github.io/2021/03/19/DesignPattern/</id>
    <published>2021-03-19T08:34:40.000Z</published>
    <updated>2021-03-26T13:32:19.998Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/senghoo/golang-design-pattern" target="_blank" rel="noopener">https://github.com/senghoo/golang-design-pattern</a></p><p>golang 设计模式</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><ol><li>定义 interface 提供 New 方法</li><li>多个 struct 实现上一步 interface 内部方法</li><li>这些 struct 都是这个 interface 的工厂实现</li><li>通过 New 的不同传入参数来决定返回的具体 struct</li></ol><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>多个不同的对象具有相同的底层函数逻辑</p><ol><li>实际实现 interface</li><li>工厂 interface</li><li>基础的操作 struct</li><li>A B struct 具有相同的底层函数，只有操作结果不同</li></ol><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>流程控制，将所有的过程都进行了抽象</p><ol><li>功能x和功能y interface</li><li>工厂 interface 包含以上功能x/y interface 的实现</li><li>A工厂分别构造功能x/y的 struct</li><li>A工厂构造工厂 interface 的实现</li></ol><h3 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h3><ol><li>build interface</li><li>Director new build interface</li><li>Construct 方法</li><li>builder1 和 builder2 实现 build interface</li></ol><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>对象可对自身进行复制</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>once.Do()</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>目前常用的模式，对象内部进行了多个interface的实现，并对某些函数功能进行组装</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将对象内部方法进行封装调用，感觉在鉴权方面可能有使用空间</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>实际开发中也很常用</p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>根据一定规律对数据进行组装，目标为可递归对象</p><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>一般情况下，我们可能直接在GET中获取到了需要的对象数据，而不考虑进一步的 factory 封装</p><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>对一个内容进行重复处理，例如对图片数据进行鉴黄、涉政、广告等检测</p><ol><li>目标 interface</li><li>多个 decorator struct 都包含目标 interface，并对其进行实现</li><li>多个实现之间进行调用，传递相同的 interface struct</li></ol><h3 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h3><ol><li>抽象消息发送对象</li><li>抽象执行发送对象</li><li>将不同的执行者添加为不同发送者的内部对象</li><li>执行统一的发送函数，实现不同的效果</li></ol><h2 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h2><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>适用于内部多种不同对象的功能封装</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ol><li>Observer interface，实现 struct， 提供 update 方法</li><li>subject 增加 observer 注册，提供调用方法调用 update</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ol><li>对象 a 中可能存在2中操作，分别对这两个操作构建命令的 interface</li><li>将对象 a 传入命令的 struct 中</li><li>再将这两个命令的 struct 传入对象 b 中，那么对象 b 就可以操作对象 a 的操作组合</li></ol><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ol><li>Aggregate interface 里面包含 Iterator</li><li>Iterator 包含 First IsDone Next 三个方法</li><li>使用方法传入 Iterator 进行迭代</li></ol><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>匿名组合模式实现继承。</p><p>父类需要调用子类方法，所以子类需要匿名组合父类的时候也需要持有子类的应用</p><ol><li>定义了模板操作</li><li>不同的方式实现模板的内部操作</li><li>保证对外暴露的调用方式唯一</li><li>适用于内部操作比较多的组合场景</li></ol><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ol><li>对象 a 内部有多重变量</li><li>传入对 a 变量操作的不同策略</li></ol><p>适用于不同策略的初始化场景，这个和享元模式组合应该不错</p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>适用于状态传递，对同一个 interface 的多个 struct，进行互相间的状态传递，与装饰模式的区别是一个在内部定义固有规则传递，一个是在外部人为控制传递。</p><ol><li>Week interface，包含 Today 和 Next，Next 里面传递了下一个次序的 struct DayContext</li><li>实现多个不同的 DayContext， 定义各自的 Next 就可以持续传递</li></ol><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>暴露一个内部数据状态的方法</p><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><ol><li>对原始数据进行规则解析，解析为统一的对象</li><li>调用 interpret 方法进行计算，node 的 left 和 right 使用很巧妙</li></ol><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>递归传递判断</p><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>struct 互相传递进行访问，有点像复杂版的策略模式</p><h2 id="高性能的-I-O-设计"><a href="#高性能的-I-O-设计" class="headerlink" title="高性能的 I/O 设计"></a>高性能的 I/O 设计</h2><h3 id="Reactor-设计模式-响应器模式"><a href="#Reactor-设计模式-响应器模式" class="headerlink" title="Reactor 设计模式/响应器模式"></a>Reactor 设计模式/响应器模式</h3><p>同步 IO 操作。适用场景为瞬间大并发。</p><p>与观察者模式的区别在于多个事件源的关联。</p><p>减少等待。当遇到需要等待 IO 时，先释放资源，再通过事件驱动继续之前的处理。</p><h3 id="Proactor-设计模式"><a href="#Proactor-设计模式" class="headerlink" title="Proactor 设计模式"></a>Proactor 设计模式</h3><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://www.jianshu.com/p/458e4b276607" target="_blank" rel="noopener">Reactor 反应堆设计模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/senghoo/golang-design-pattern&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/senghoo/golang-design-patter
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Golang Concurrent</title>
    <link href="http://mex7.github.io/2020/08/27/Golang%20Concurrent/"/>
    <id>http://mex7.github.io/2020/08/27/Golang%20Concurrent/</id>
    <published>2020-08-27T03:29:40.000Z</published>
    <updated>2021-03-21T14:50:35.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ambiguous-import"><a href="#ambiguous-import" class="headerlink" title="ambiguous import"></a>ambiguous import</h2><p>模糊不清的引入包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ambiguous-import&quot;&gt;&lt;a href=&quot;#ambiguous-import&quot; class=&quot;headerlink&quot; title=&quot;ambiguous import&quot;&gt;&lt;/a&gt;ambiguous import&lt;/h2&gt;&lt;p&gt;模糊不清的引入包&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="golang" scheme="http://mex7.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>ut</title>
    <link href="http://mex7.github.io/2020/08/24/UT/"/>
    <id>http://mex7.github.io/2020/08/24/UT/</id>
    <published>2020-08-24T03:29:40.000Z</published>
    <updated>2021-04-12T02:29:50.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器化单元测试"><a href="#容器化单元测试" class="headerlink" title="容器化单元测试"></a>容器化单元测试</h2><p><a href="https://github.com/go-kratos/kratos/blob/master/doc/wiki-cn/summary.md" target="_blank" rel="noopener">https://github.com/go-kratos/kratos/blob/master/doc/wiki-cn/summary.md</a></p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>go test -short $(go list ./… | grep -v /vendor/)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;容器化单元测试&quot;&gt;&lt;a href=&quot;#容器化单元测试&quot; class=&quot;headerlink&quot; title=&quot;容器化单元测试&quot;&gt;&lt;/a&gt;容器化单元测试&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/go-kratos/kratos/blob/
      
    
    </summary>
    
    
    
      <category term="golang" scheme="http://mex7.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Article</title>
    <link href="http://mex7.github.io/2020/06/08/article/"/>
    <id>http://mex7.github.io/2020/06/08/article/</id>
    <published>2020-06-08T03:29:40.000Z</published>
    <updated>2021-03-21T14:50:35.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><p><a href="https://github.com/golang-standards/project-layout" target="_blank" rel="noopener">project layout</a></p><p><a href="https://github.com/xxjwxc/uber_go_guide_cn" target="_blank" rel="noopener">uber-go/guide</a></p><p><a href="https://draveness.me/golang-101/" target="_blank" rel="noopener">如何写出优雅的 Go 语言代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;collection&quot;&gt;&lt;a href=&quot;#collection&quot; class=&quot;headerlink&quot; title=&quot;collection&quot;&gt;&lt;/a&gt;collection&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/golang-sta
      
    
    </summary>
    
    
    
      <category term="golang" scheme="http://mex7.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://mex7.github.io/2020/05/23/Docker/"/>
    <id>http://mex7.github.io/2020/05/23/Docker/</id>
    <published>2020-05-23T03:34:40.000Z</published>
    <updated>2021-04-12T11:04:23.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="删除目前所有容器"><a href="#删除目前所有容器" class="headerlink" title="删除目前所有容器"></a>删除目前所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name <span class="built_in">local</span>-mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:latest</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it xxxxx /bin/bash</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="某集成镜像"><a href="#某集成镜像" class="headerlink" title="某集成镜像"></a>某集成镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># Maintainer's information</span></span><br><span class="line">MAINTAINER xxx &lt;xxx.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># set env</span></span><br><span class="line">ENV REGION_CODE=cn_wuhan_guanggu \</span><br><span class="line">    REGION_NAME=武汉光谷 \</span><br><span class="line">    ZONE_CODE=cn_wuhan_guanggu_f3 \</span><br><span class="line">    ZONE_NAME=武汉光谷可用区F3 \</span><br><span class="line">    APP_ENV=dev \</span><br><span class="line">    BASE_DIR=<span class="string">"/home/www/server/juno"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy file</span></span><br><span class="line">ADD . /home/www/server/juno</span><br><span class="line">RUN chmod -R 775 /home/www/server/juno/bin</span><br><span class="line">RUN <span class="built_in">cd</span> /home/www/server/juno &amp;&amp; ls -l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># install httpd package</span></span><br><span class="line">RUN yum -y update</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line">RUN yum -y install sudo mysql mysql-server  \</span><br><span class="line">    &amp;&amp; mysqld \</span><br><span class="line">    &amp;&amp; mysql -e <span class="string">"grant all privileges on *.* to 'root'@'%' identified by 'root';"</span> \</span><br><span class="line">    &amp;&amp; mysql -e <span class="string">"grant all privileges on *.* to 'root'@'localhost' identified by 'root';"</span> \</span><br><span class="line">    &amp;&amp; mysql -u root -proot -e <span class="string">"show databases;"</span> \</span><br><span class="line">    &amp;&amp; /home/www/server/juno/install \</span><br><span class="line">    &amp;&amp; mysql -u root -proot -e <span class="string">"show databases;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd</span></span><br><span class="line">RUN yum -y install etcd &amp;&amp;\</span><br><span class="line">    nohup ./etcd &gt;/tmp/etcd.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx</span></span><br><span class="line">RUN yum -y install nginx &amp;&amp;\</span><br><span class="line">    copy /home/www/server/juno/config/nginx/juno.com.conf /etc/nginx/conf.d/juno.com.conf &amp;&amp;\</span><br><span class="line">    RUN /sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisor</span></span><br><span class="line">RUN yum -y supervisor &amp;&amp;\</span><br><span class="line">    copy /home/www/server-juno/config/supervisor/supervisord.conf /etc/supervisord.conf</span><br><span class="line"></span><br><span class="line">EXPOSE 80 50000</span><br><span class="line">CMD [<span class="string">"/usr/bin/supervisord"</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h2&gt;&lt;h3 id=&quot;删除目前所有容器&quot;&gt;&lt;a href=&quot;#删除目前所有容器&quot; class=&quot;headerlink&quot; title=&quot;删
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>GIT</title>
    <link href="http://mex7.github.io/2020/05/23/git/"/>
    <id>http://mex7.github.io/2020/05/23/git/</id>
    <published>2020-05-23T03:34:40.000Z</published>
    <updated>2021-03-21T14:49:57.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-clone-地址替换"><a href="#git-clone-地址替换" class="headerlink" title="git clone 地址替换"></a>git clone 地址替换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.<span class="string">"git@github.com:"</span>.insteadOf <span class="string">"https://github.com/"</span></span><br></pre></td></tr></table></figure><h2 id="删除-commit-历史"><a href="#删除-commit-历史" class="headerlink" title="删除 commit 历史"></a>删除 commit 历史</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan latest_branch</span><br><span class="line">git add -A</span><br><span class="line">git commit -am <span class="string">"init"</span></span><br><span class="line">git branch -D 想要提交的分支（master）</span><br><span class="line">git branch -m 想要提交的分支（master）</span><br><span class="line">git push -f origin 想要提交的分支（master）</span><br></pre></td></tr></table></figure><h2 id="清理-git-文件夹"><a href="#清理-git-文件夹" class="headerlink" title="清理.git 文件夹"></a>清理.git 文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan latest_branch</span><br><span class="line">git add -A</span><br><span class="line">git commit -am <span class="string">"init"</span></span><br><span class="line">git branch -D master</span><br><span class="line">git branch -m master</span><br><span class="line">rm -rf .git</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:douyu/juno.git</span><br><span class="line">git push --mirror git@github.com:douyu/juno.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-clone-地址替换&quot;&gt;&lt;a href=&quot;#git-clone-地址替换&quot; class=&quot;headerlink&quot; title=&quot;git clone 地址替换&quot;&gt;&lt;/a&gt;git clone 地址替换&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2019-07-17-CGO-pb</title>
    <link href="http://mex7.github.io/2019/07/17/2019-07-17-CGO-pb/"/>
    <id>http://mex7.github.io/2019/07/17/2019-07-17-CGO-pb/</id>
    <published>2019-07-17T14:24:33.000Z</published>
    <updated>2021-04-12T11:03:25.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pb"><a href="#pb" class="headerlink" title="pb"></a>pb</h2><p>使用<code>char **protobuffer</code>获取pb编码的字节数据<code>int *protobuffer_len</code>表示字节长度</p><p>参考头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SDK_API vod process(</span><br><span class="line">dy_handle_t handle,</span><br><span class="line">const char* data,</span><br><span class="line">int length,</span><br><span class="line">char **protobuffer,</span><br><span class="line">int *protobuffer_len</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>获取返回数据方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var output *C.char</span><br><span class="line">resIntC :&#x3D; C.int(resInt)</span><br><span class="line"></span><br><span class="line">C.process(h.handler, dataC, dataSizeC, &amp;output, &amp;resIntC)</span><br></pre></td></tr></table></figure><p>按照上面这个方式能够获取到<code>output</code>回传的参数，问题在于如何将数据转换成<code>[]byte</code></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]byte(C.GoString(output))</span><br></pre></td></tr></table></figure><p>问题：对<code>00 00 00</code> 产生截断，导致<code>proto.Unmarshal</code>报错</p><p><img src="https://i.loli.net/2019/07/17/5d2f3a5b22cab13798.png" alt="QQ截图20190717230529.png"></p><h3 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C.GoBytes(unsafe.Pointer(&amp;output), 11612)</span><br></pre></td></tr></table></figure><p>能保证前11612长度字节流数据正确，但是数据拷贝之后产生乱码，原因未知</p><p><img src="https://i.loli.net/2019/07/17/5d2f3a5b418d965348.png" alt="QQ截图20190717230740.png"></p><h3 id="0x3-正解"><a href="#0x3-正解" class="headerlink" title="0x3 正解"></a>0x3 正解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(*[]byte)(unsafe.Pointer(&amp;output))[0:11612]</span><br></pre></td></tr></table></figure><p>正确写法，直接使用内存数据，但如果不限制长度会到内存存储的连续数据片段</p><p><img src="https://i.loli.net/2019/07/18/5d2fd8329787929749.png" alt="2.png"></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://stackoverflow.com/questions/35673161/convert-go-byte-to-a-c-char" target="_blank" rel="noopener">https://stackoverflow.com/questions/35673161/convert-go-byte-to-a-c-char</a></p><p><a href="https://stackoverflow.com/questions/27532523/how-to-convert-1024c-char-to-1024byte" target="_blank" rel="noopener">https://stackoverflow.com/questions/27532523/how-to-convert-1024c-char-to-1024byte</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pb&quot;&gt;&lt;a href=&quot;#pb&quot; class=&quot;headerlink&quot; title=&quot;pb&quot;&gt;&lt;/a&gt;pb&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;char **protobuffer&lt;/code&gt;获取pb编码的字节数据&lt;code&gt;int *protobuffer_len
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>弹幕加密服务</title>
    <link href="http://mex7.github.io/2019/06/13/2019-06-13-%E5%BC%B9%E5%B9%95%E5%8A%A0%E5%AF%86%E6%9C%8D%E5%8A%A1/"/>
    <id>http://mex7.github.io/2019/06/13/2019-06-13-%E5%BC%B9%E5%B9%95%E5%8A%A0%E5%AF%86%E6%9C%8D%E5%8A%A1/</id>
    <published>2019-06-12T16:44:46.000Z</published>
    <updated>2021-04-12T11:03:25.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弹幕加密服务上线"><a href="#弹幕加密服务上线" class="headerlink" title="弹幕加密服务上线"></a>弹幕加密服务上线</h1><h2 id="6月11日"><a href="#6月11日" class="headerlink" title="6月11日"></a>6月11日</h2><p>第一次发版，配合运维解决线上环境问题。</p><h2 id="6月12日"><a href="#6月12日" class="headerlink" title="6月12日"></a>6月12日</h2><p>服务器扩容，新增2台机器。</p><p>新增机器之后，开放 CPU 限制导致，由于 login 消息积压，导致 CPU 一直满载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    ncpu :&#x3D; runtime.NumCPU()</span><br><span class="line">    if ncpu &gt; 2 &#123;</span><br><span class="line">        runtime.GOMAXPROCS(int(ncpu) - 2)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>MQ 消费问题，如何能更自然的解决积压问题，还有积压告警</p><p>问题：</p><ul><li>如果没有消费者，生产者持续生成，数据会存到硬盘，过期策略，等到消费者上线会产生积压，要是新增一个消费者，之前的数据怎么搞，那不是都有积压，哈？</li></ul><h2 id="6月13日"><a href="#6月13日" class="headerlink" title="6月13日"></a>6月13日</h2><p>四台机器消费能力正常，增加大数据提供的线上接口之后出现另外的问题，机器有16G的内存，基本一小时内打满。</p><p><img src="https://i.loli.net/2019/06/13/5d023a992276275306.png" alt="代码.png"></p><p>分析原因是当前版本 resty 的遗留问题，针对类似参数多变的 URL 会进行 Metric 监控采集，由于 QPS 晚高峰达到 5000+ 情况下，大数据接口产生数据延时以及报错，导致 timer 时延进而内存堆积。</p><p><img src="https://i.loli.net/2019/06/13/5d023b3c5b3f671305.png" alt="内存.png"></p><p>升级 resty 解决。</p><p>增加自定义 Metric</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func SetMetric(typeStr string) &#123;</span><br><span class="line">    EncryptImp.metric.Counter(typeStr, map[string]string&#123;</span><br><span class="line">        &quot;ctype&quot;: typeStr,</span><br><span class="line">    &#125;).Inc(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务上线前对大数据的接口没有进行压测，线下没发现这个问题。</p><p>调整之后目前线上服务稳定。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>MQ 消费服务上线注意积压问题，准备解压方案</li><li>对于 QPS 较高的服务进行完整性压测</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;弹幕加密服务上线&quot;&gt;&lt;a href=&quot;#弹幕加密服务上线&quot; class=&quot;headerlink&quot; title=&quot;弹幕加密服务上线&quot;&gt;&lt;/a&gt;弹幕加密服务上线&lt;/h1&gt;&lt;h2 id=&quot;6月11日&quot;&gt;&lt;a href=&quot;#6月11日&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>混沌工程</title>
    <link href="http://mex7.github.io/2019/06/10/2019-06-10-%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/"/>
    <id>http://mex7.github.io/2019/06/10/2019-06-10-%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/</id>
    <published>2019-06-10T01:36:24.000Z</published>
    <updated>2021-04-12T11:03:25.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2010 Netflix Eng Tools</p><h1 id="Chaos-Monkey"><a href="#Chaos-Monkey" class="headerlink" title="Chaos Monkey"></a>Chaos Monkey</h1><p><a href="https://github.com/Netflix/chaosmonkey" target="_blank" rel="noopener">https://github.com/Netflix/chaosmonkey</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;2010 Netflix Eng Tools&lt;/p&gt;
&lt;h1 id=&quot;Chaos-Monkey&quot;&gt;&lt;a href=&quot;#Chaos-Monke
      
    
    </summary>
    
    
    
      <category term="斗鱼" scheme="http://mex7.github.io/tags/%E6%96%97%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>测试用例编写建议</title>
    <link href="http://mex7.github.io/2019/05/30/2019-05-30-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E5%BB%BA%E8%AE%AE/"/>
    <id>http://mex7.github.io/2019/05/30/2019-05-30-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E5%BB%BA%E8%AE%AE/</id>
    <published>2019-05-30T06:26:54.000Z</published>
    <updated>2021-04-12T11:03:25.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"cfg"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewProducerAssembly</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// import the configureation file</span></span><br><span class="line"><span class="keyword">if</span> err := cfg.LoadFromFile(<span class="string">"../../config/config-local.toml"</span>, <span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// verify that the configureation file was read successfully</span></span><br><span class="line"><span class="comment">//fmt.Println(cfg.GetString("app.mode"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// prep environment</span></span><br><span class="line">Mobile = NewMobile()</span><br><span class="line">logger.Init()</span><br><span class="line">obj := NewProducerAssembly(<span class="string">"pubg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> testInput <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctype <span class="keyword">string</span></span><br><span class="line">Rid   <span class="keyword">uint32</span></span><br><span class="line">Data  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// writing test examples</span></span><br><span class="line">tests := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span> &#123;</span><br><span class="line">input testInput</span><br><span class="line">want  error</span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="string">"pubg-live"</span>: &#123;</span><br><span class="line">input: testInput&#123;</span><br><span class="line">Ctype: <span class="string">"alive"</span>,</span><br><span class="line">Rid:   <span class="number">777</span>,</span><br><span class="line">Data:  <span class="string">"97"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: <span class="literal">nil</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"pubg-kill"</span>: &#123;</span><br><span class="line">input: testInput&#123;</span><br><span class="line">Ctype: <span class="string">"kill"</span>,</span><br><span class="line">Rid:   <span class="number">777</span>,</span><br><span class="line">Data:  <span class="string">"5"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: <span class="literal">nil</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got := obj.Set(tc.input.Ctype, tc.input.Rid, tc.input.Data)</span><br><span class="line">diff := cmp.Diff(tc.want, got)</span><br><span class="line"><span class="keyword">if</span> diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Fatalf(diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"结果检验："</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">want := <span class="keyword">map</span>[common.Rid]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">want[<span class="number">777</span>] = <span class="string">"97,5"</span></span><br><span class="line">got := obj.get()</span><br><span class="line">fmt.Println(got)</span><br><span class="line">diff := cmp.Diff(want, got)</span><br><span class="line"><span class="keyword">if</span> diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Fatalf(diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h1&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>GopherChina 2019</title>
    <link href="http://mex7.github.io/2019/04/29/2019-04-25-GopherChina2019/"/>
    <id>http://mex7.github.io/2019/04/29/2019-04-25-GopherChina2019/</id>
    <published>2019-04-29T07:48:45.000Z</published>
    <updated>2021-04-12T11:03:25.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大型微服务框架设计实践"><a href="#大型微服务框架设计实践" class="headerlink" title="大型微服务框架设计实践"></a>大型微服务框架设计实践</h2><p>比较偏理论，介绍的概念基本在现有的主流公司都有一定程度的应用，思路大同小异，但是将微服务比作操作系统，个人觉得这个比喻很不错，我们开发基础组件需要保有这个为业务服务的思维。</p><h2 id="用Go打造Grab的路径规划及ETA引擎"><a href="#用Go打造Grab的路径规划及ETA引擎" class="headerlink" title="用Go打造Grab的路径规划及ETA引擎"></a>用Go打造Grab的路径规划及ETA引擎</h2><p>寻路算法，与之前几届内容差不多。</p><h2 id="TiDB-的-Golang-实践"><a href="#TiDB-的-Golang-实践" class="headerlink" title="TiDB 的 Golang 实践"></a>TiDB 的 Golang 实践</h2><p>开发 TiDB 过程中的一些实践，自研的 <code>Schrodinger</code>，模拟实际场景中硬件、软件中多种多样意外场景的随机测试平台，支持 gofail，自定义 failpoint；goroutine 内存泄露的讨论；高效的编码格式。</p><h2 id="How-to-write-testable-code"><a href="#How-to-write-testable-code" class="headerlink" title="How to write testable code"></a>How to write testable code</h2><p>单元测试的编写思想，针对可导出函数进行单元测试。<br>更加完整的测试结果输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> tests := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span> &#123;</span><br><span class="line"> input <span class="keyword">string</span></span><br><span class="line"> sep <span class="keyword">string</span></span><br><span class="line"> want []<span class="keyword">string</span></span><br><span class="line"> &#125;&#123;</span><br><span class="line"> <span class="string">"simple"</span>: &#123;input: <span class="string">"a/b/c"</span>, sep: <span class="string">"/"</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line"> <span class="string">"wrong sep"</span>: &#123;input: <span class="string">"a/b/c"</span>, sep: <span class="string">","</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"a/b/c"</span>&#125;&#125;,</span><br><span class="line"> <span class="string">"no sep"</span>: &#123;input: <span class="string">"abc"</span>, sep: <span class="string">"/"</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"abc"</span>&#125;&#125;,</span><br><span class="line"> <span class="string">"trailing sep"</span>: &#123;input: <span class="string">"a/b/c/"</span>, sep: <span class="string">"/"</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> name, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line"> t.Run(name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> got := Split(tc.input, tc.sep)</span><br><span class="line"> diff := cmp.Diff(tc.want, got)</span><br><span class="line"> <span class="keyword">if</span> diff != <span class="string">""</span> &#123;</span><br><span class="line"> t.Fatalf(diff)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于TDD的一个YouTube视频<br><img src="https://i.loli.net/2019/04/29/5cc6ac7cbaf33.png" alt="关于TDD的一个YouTube视频"></p><h2 id="Go-业务基础库之-Error-amp-Context"><a href="#Go-业务基础库之-Error-amp-Context" class="headerlink" title="Go 业务基础库之 Error &amp; Context"></a>Go 业务基础库之 Error &amp; Context</h2><p>错误处理的一些思路分享；<code>Context</code>的使用建议，在不确定的时候就是用 context.TODO；很多很实在的编程经验，受益良多。</p><h2 id="Go-同步和并发设计模式"><a href="#Go-同步和并发设计模式" class="headerlink" title="Go 同步和并发设计模式"></a>Go 同步和并发设计模式</h2><p>基础深入的讲解。</p><ul><li>Mutex</li><li>RWMutex</li><li>Cond</li><li>Waitgroup</li><li>Once</li><li>Pool</li><li>Map</li><li>ReentrantLock</li><li>Semaphore</li><li>SingleFlight</li><li>ErrGroup</li><li>SpinLock</li><li>Fslock</li><li>Concurrent Map<br>后续还有原子操作、channel 和内存模型的讲解。</li></ul><h2 id="百度APP-Go语言实践"><a href="#百度APP-Go语言实践" class="headerlink" title="百度APP Go语言实践"></a>百度APP Go语言实践</h2><p>开发框架，依赖管理，代码检查的相关介绍。</p><h2 id="用Go打造实时音视频SaaS云服务"><a href="#用Go打造实时音视频SaaS云服务" class="headerlink" title="用Go打造实时音视频SaaS云服务"></a>用Go打造实时音视频SaaS云服务</h2><p>公司业务介绍，实践中遇到的问题分享，</p><h2 id="基于Minio的对象存储方案在探探的应用"><a href="#基于Minio的对象存储方案在探探的应用" class="headerlink" title="基于Minio的对象存储方案在探探的应用"></a>基于Minio的对象存储方案在探探的应用</h2><p>技术方案选型过程，压测中遇到的问题，以及相关的解决思路。Minio不能胜任小型数据的大量级读写操作，采用 leveldb 来有序化读写流程，从而提高效率。</p><h2 id="从-0-开始用-Go-实现-Lexer-amp-Parser"><a href="#从-0-开始用-Go-实现-Lexer-amp-Parser" class="headerlink" title="从 0 开始用 Go 实现 Lexer &amp; Parser"></a>从 0 开始用 Go 实现 Lexer &amp; Parser</h2><p>内容很深奥…<br>分享很有趣…</p><h2 id="高性能高可用开发框架TarsGo的腾讯实践"><a href="#高性能高可用开发框架TarsGo的腾讯实践" class="headerlink" title="高性能高可用开发框架TarsGo的腾讯实践"></a>高性能高可用开发框架TarsGo的腾讯实践</h2><p>不错，想用。</p><h2 id="闪电网络—BTC小额支付解决方案"><a href="#闪电网络—BTC小额支付解决方案" class="headerlink" title="闪电网络—BTC小额支付解决方案"></a>闪电网络—BTC小额支付解决方案</h2><p>个人感觉还是在进行中心化。</p><h2 id="Using-Go-Modules-in-everyday-life"><a href="#Using-Go-Modules-in-everyday-life" class="headerlink" title="Using Go Modules in everyday life"></a>Using Go Modules in everyday life</h2><p>go mod 的使用技巧，还有 goland 的相关操作。</p><h2 id="用Go构建高性能数据库中间件"><a href="#用Go构建高性能数据库中间件" class="headerlink" title="用Go构建高性能数据库中间件"></a>用Go构建高性能数据库中间件</h2><p>赶火车去了…</p><h2 id="golang在花椒直播业务场景下的微服务应用"><a href="#golang在花椒直播业务场景下的微服务应用" class="headerlink" title="golang在花椒直播业务场景下的微服务应用"></a>golang在花椒直播业务场景下的微服务应用</h2><p>…</p><h2 id="知乎社区核心业务-Golang-化实践"><a href="#知乎社区核心业务-Golang-化实践" class="headerlink" title="知乎社区核心业务 Golang 化实践"></a>知乎社区核心业务 Golang 化实践</h2><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大型微服务框架设计实践&quot;&gt;&lt;a href=&quot;#大型微服务框架设计实践&quot; class=&quot;headerlink&quot; title=&quot;大型微服务框架设计实践&quot;&gt;&lt;/a&gt;大型微服务框架设计实践&lt;/h2&gt;&lt;p&gt;比较偏理论，介绍的概念基本在现有的主流公司都有一定程度的应用，思路大
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
